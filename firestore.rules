/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and
 * allows public read access to articles, categories, districts, jobs, and posts.
 * Only the author can create, update, or delete an article or post.
 * User profiles are private and accessible only to the owner.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /articles/{articleId}: News articles, publicly readable but owner-writable.
 * - /categories/{categoryId}: News categories, publicly readable.
 * - /districts/{districtId}: Districts, publicly readable.
 * - /jobs/{jobId}: Job postings, publicly readable.
 * - /posts/{postId}: Community posts, publicly readable but owner-writable.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Articles and posts are publicly readable but only the author can create, update, or delete.
 * - Categories, districts, and jobs are publicly readable and writable, suitable for prototyping.
 *
 * Denormalization for Authorization:
 * - Articles and posts include an `authorId` field for ownership checks, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the existing document's owner ID.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create their own profile at /users/alice.
     * @allow (get, update, delete) - User 'alice' (auth.uid: 'alice') can read, update, and delete their own profile at /users/alice.
     * @deny (create, update, delete) - User 'bob' (auth.uid: 'bob') cannot create, update, or delete user 'alice's profile at /users/alice.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for news articles.
     * @path /articles/{articleId}
     * @allow (get, list) - Any user can read any article.
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create an article with authorId: 'alice'.
     * @allow (update, delete) - User 'alice' (auth.uid: 'alice') can update and delete their own article (where resource.data.authorId == 'alice').
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create an article with authorId: 'alice'.
     * @deny (update, delete) - User 'bob' (auth.uid: 'bob') cannot update or delete user 'alice's article.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for news categories.
     * @path /categories/{categoryId}
     * @allow (get, list, create, update, delete) - Any user can read, list, create, update, or delete any category.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Rules for districts.
      * @path /districts/{districtId}
      * @allow (get, list, create, update, delete) - Any user can read, list, create, update, or delete any district.
      */
    match /districts/{districtId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list, create, update, delete) - Any user can read, list, create, update, or delete any job posting.
     */
    match /jobs/{jobId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Rules for community posts.
     * @path /posts/{postId}
     * @allow (get, list) - Any user can read any post.
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create a post with authorId: 'alice'.
     * @allow (update, delete) - User 'alice' (auth.uid: 'alice') can update and delete their own post (where resource.data.authorId == 'alice').
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create a post with authorId: 'alice'.
     * @deny (update, delete) - User 'bob' (auth.uid: 'bob') cannot update or delete user 'alice's post.
     */
    match /posts/{postId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.authorId);
        allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}