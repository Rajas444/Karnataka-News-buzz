rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their own profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456 (different UID).
     * @deny (get) User with UID 'user123' cannot read the profile of user 'user456' at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Controls access to news article documents.
     * @path /articles/{articleId}
     * @allow (get) Any user can read an article.
     * @allow (list) Any user can list articles.
     * @allow (create) User with UID 'user123' can create an article with authorId 'user123'.
     * @allow (update) User with UID 'user123' can update an article with authorId 'user123'.
     * @allow (delete) User with UID 'user123' can delete an article with authorId 'user123'.
     * @deny (create) User with UID 'user123' cannot create an article with authorId 'user456' (mismatched authorId).
     * @deny (update) User with UID 'user123' cannot update an article with authorId 'user456' (not the author).
     * @principle Allows public reads but restricts writes to the document owner.
     */
    match /articles/{articleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId;
      }
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId && exists(resource);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (list) Any user can list categories.
     * @allow (create) User with UID 'user123' can create a category.
     * @allow (update) User with UID 'user123' can update a category if they are the owner.
     * @allow (delete) User with UID 'user123' can delete a category if they are the owner.
     * @deny (create) User without authentication cannot create a category.
     * @deny (update) User without authentication cannot update a category.
     * @principle Allows public reads but restricts writes to the document owner.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId;
      }
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId && exists(resource);
      }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to district documents.
     * @path /districts/{districtId}
     * @allow (get) Any user can read a district.
     * @allow (list) Any user can list districts.
     * @allow (create) User with UID 'user123' can create a district.
     * @allow (update) User with UID 'user123' can update a district if they are the owner.
     * @allow (delete) User with UID 'user123' can delete a district if they are the owner.
     * @deny (create) User without authentication cannot create a district.
     * @deny (update) User without authentication cannot update a district.
     * @principle Allows public reads but restricts writes to the document owner.
     */
    match /districts/{districtId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId;
      }
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.authorId && exists(resource);
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to job posting documents.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (list) Any user can list job postings.
     * @allow (create) User with UID 'user123' can create a job posting.
     * @allow (update) User with UID 'user123' can update a job posting if they are the owner.
     * @allow (delete) User with UID 'user123' can delete a job posting if they are the owner.
     * @deny (create) User without authentication cannot create a job posting.
     * @deny (update) User without authentication cannot update a job posting.
     * @principle Allows public reads but restricts writes to the document owner.
     */
    match /jobs/{jobId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner() {
          return isSignedIn() && request.auth.uid == resource.data.authorId;
        }
        function isExistingOwner() {
          return isSignedIn() && request.auth.uid == resource.data.authorId && exists(resource);
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to community post documents.
     * @path /posts/{postId}
     * @allow (get) Any user can read a community post.
     * @allow (list) Any user can list community posts.
     * @allow (create) User with UID 'user123' can create a community post with authorId 'user123'.
     * @allow (update) User with UID 'user123' can update a community post with authorId 'user123'.
     * @allow (delete) User with UID 'user123' can delete a community post with authorId 'user123'.
     * @deny (create) User with UID 'user123' cannot create a community post with authorId 'user456' (mismatched authorId).
     * @deny (update) User with UID 'user123' cannot update a community post with authorId 'user456' (not the author).
     * @principle Allows public reads but restricts writes to the document owner.
     */
    match /posts/{postId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner() {
          return isSignedIn() && request.auth.uid == resource.data.authorId;
        }
        function isExistingOwner() {
          return isSignedIn() && request.auth.uid == resource.data.authorId && exists(resource);
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
        allow update: if isSignedIn() && isExistingOwner();
        allow delete: if isSignedIn() && isExistingOwner();
    }
  }
}