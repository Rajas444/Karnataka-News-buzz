/**
 * @fileoverview Firestore Security Rules for the news portal application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict
 * access control based on user authentication and authorization. It allows
 * public read access to certain collections (e.g., articles) while restricting
 * write access to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /articles/{articleId}: Stores news articles, publicly readable but writable only by the article author.
 * - /categories/{categoryId}: Stores news categories, publicly readable.
 * - /districts/{districtId}: Stores districts in Karnataka, publicly readable.
 * - /jobs/{jobId}: Stores job postings, publicly readable.
 * - /posts/{postId}: Stores community posts, publicly readable but writable only by the post author.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Articles are publicly readable but only the author can create, update, or delete them.
 * - Categories, districts, and jobs are publicly readable.
 * - Community posts are publicly readable but only the author can create, update, or delete them.
 * - Listing all users is disallowed for privacy and security reasons.
 *
 * Denormalization for Authorization:
 *  - Articles and posts require `authorId` fields to ensure that ownership can be validated in rules without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (read) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (read) User with UID 'user456' cannot read user 'user123' profile.
     * @deny (create) User with UID 'user456' cannot create user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update user 'user123' profile.
     * @deny (delete) User with UID 'user456' cannot delete user 'user123' profile.
     * @principle Enforces user-ownership for all profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read articles, but only the author can create, update, or delete them.
     * @path /articles/{articleId}
     * @allow (get) Any user can read any article.
     * @allow (list) Any user can list articles.
     * @allow (create) User with UID 'user123' can create an article with authorId 'user123'.
     * @allow (update) User with UID 'user123' can update an article if they are the author.
     * @allow (delete) User with UID 'user123' can delete an article if they are the author.
     * @deny (create) User with UID 'user123' cannot create an article with authorId 'user456'.
     * @deny (update) User with UID 'user456' cannot update article created by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete article created by user 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /articles/{articleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read news categories.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read any category.
     * @allow (list) Any user can list categories.
     * @deny (create) No one can create a category.
     * @deny (update) No one can update a category.
     * @deny (delete) No one can delete a category.
     * @principle Enforces public read-only access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read districts.
     * @path /districts/{districtId}
     * @allow (get) Any user can read any district.
     * @allow (list) Any user can list districts.
     * @deny (create) No one can create a district.
     * @deny (update) No one can update a district.
     * @deny (delete) No one can delete a district.
     * @principle Enforces public read-only access.
     */
    match /districts/{districtId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read job postings.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read any job posting.
     * @allow (list) Any user can list job postings.
     * @deny (create) No one can create a job posting.
     * @deny (update) No one can update a job posting.
     * @deny (delete) No one can delete a job posting.
     * @principle Enforces public read-only access.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read community posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get) Any user can read any community post.
     * @allow (list) Any user can list community posts.
     * @allow (create) User with UID 'user123' can create a post with authorId 'user123'.
     * @allow (update) User with UID 'user123' can update a post if they are the author.
     * @allow (delete) User with UID 'user123' can delete a post if they are the author.
     * @deny (create) User with UID 'user123' cannot create a post with authorId 'user456'.
     * @deny (update) User with UID 'user456' cannot update post created by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete post created by user 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}