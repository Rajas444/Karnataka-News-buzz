/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a tiered security model. User profiles are private, accessible only to the owning user.
 * Articles are publicly readable but only editable by their authors. Categories and Districts are publicly readable.
 * Jobs are publicly readable, and Posts (community posts) are also publicly readable, editable by their authors.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /articles/{articleId}: News articles.
 * - /categories/{categoryId}: News categories.
 * - /districts/{districtId}: District information.
 * - /jobs/{jobId}: Job postings
 * - /posts/{postId}: Community posts.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and owner-accessible only.
 * - Articles are publicly readable, but only the author can modify/delete them.
 * - Categories and Districts are completely public.
 * - Jobs and Posts are publicly readable, but only the author can modify/delete them.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Articles, Jobs, and Posts require the `authorId` field to match the authenticated user's `uid` for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owning user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get) User with UID 'user123' can create/update/delete their own profile at /users/user123.
     * @deny (create, update, delete, get) User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isSignedIn() && resource.data.uid == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to news articles, allowing public read access but restricting write access to the author.
     * @path /articles/{articleId}
     * @allow (get, list) Any user can read/list articles.
     * @allow (create, update, delete) User with UID 'auth123' can create/update/delete an article where article.authorId == 'auth123'.
     * @deny (create) User attempts to create an article with mismatched authorId.
     * @deny (update, delete) User tries to update/delete an article they don't own.
     * @principle Provides public read access with owner-only writes, validated by the 'authorId' field.
     */
    match /articles/{articleId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isSignedIn() && resource.data.authorId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Provides completely public access to news categories.
     * @path /categories/{categoryId}
     * @allow (get, list, create, update, delete) Any user can read/list/create/update/delete categories.
     * @principle Allows public access for all operations.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
       allow create, update, delete: if false;
    }

    /**
     * @description Provides completely public access to district information.
     * @path /districts/{districtId}
     * @allow (get, list, create, update, delete) Any user can read/list districts.
     * @principle Allows public access for all read operations.
     */
    match /districts/{districtId} {
      allow get, list: if true;
       allow create, update, delete: if false;
    }

        /**
     * @description Manages access to job postings, allowing public read access but restricting write access to the author.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read/list job postings.
     * @allow (create, update, delete) User with UID 'auth123' can create/update/delete a job posting where job.authorId == 'auth123'.
     * @deny (create) User attempts to create a job posting with mismatched authorId.
     * @deny (update, delete) User tries to update/delete a job posting they don't own.
     * @principle Provides public read access with owner-only writes, validated by the 'authorId' field.
     */
    match /jobs/{jobId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(authorId) {
            return request.auth.uid == authorId;
        }
        function isExistingOwner(authorId) {
            return isSignedIn() && resource.data.authorId == request.auth.uid;
        }
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

        /**
     * @description Manages access to community posts, allowing public read access but restricting write access to the author.
     * @path /posts/{postId}
     * @allow (get, list) Any user can read/list community posts.
     * @allow (create, update, delete) User with UID 'auth123' can create/update/delete a post where post.authorId == 'auth123'.
     * @deny (create) User attempts to create a community post with mismatched authorId.
     * @deny (update, delete) User tries to update/delete a community post they don't own.
     * @principle Provides public read access with owner-only writes, validated by the 'authorId' field.
     */
    match /posts/{postId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(authorId) {
            return request.auth.uid == authorId;
        }
        function isExistingOwner(authorId) {
            return isSignedIn() && resource.data.authorId == request.auth.uid;
        }
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }
  }
}