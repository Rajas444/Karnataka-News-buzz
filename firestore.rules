rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read, write) if the user is authenticated and the UID matches the userId.
     * @deny (read, write) if the user is not authenticated or the UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
    }

    /**
     * @description Controls access to article documents.
     * @path /articles/{articleId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with the 'admin' role.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to category documents.
     * @path /categories/{categoryId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with the 'admin' role.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to district documents.
     * @path /districts/{districtId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with the 'admin' role.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /districts/{districtId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to job documents.
     * @path /jobs/{jobId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with the 'admin' role.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
        match /jobs/{jobId} {
            allow get, list: if true;
            allow create, update, delete: if isAdmin();
        }

    /**
     * @description Controls access to post documents.
     * @path /posts/{postId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) to users with the 'admin' role.
     * @deny (create, update, delete) to non-admins.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
       return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  }

}