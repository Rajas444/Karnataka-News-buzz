/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a hybrid security model:
 *   - User profiles are private and only accessible to the owning user.
 *   - News articles, categories, districts, jobs, and community posts are publicly readable,
 *     but write access is restricted to authenticated users with the appropriate ownership.
 * @data_structure
 *   - /users/{userId}: Stores individual user profiles.
 *   - /articles/{articleId}: Stores individual news articles.
 *   - /categories/{categoryId}: Stores news categories.
 *   - /districts/{districtId}: Stores districts.
 *   - /jobs/{jobId}: Stores job postings.
 *   - /posts/{postId}: Stores community posts.
 * @key_security_decisions
 *   - User profiles are private; only the owning user can read or write their profile.
 *   - Articles, categories, districts, jobs, and posts are publicly readable.
 *   - Articles, categories, districts, jobs, and posts can only be created, updated, or deleted by an authenticated user.
 *   - Listing of users is disallowed.
 *   - Data shape is not strictly enforced in this prototype.
 * @denormalization_for_authorization
 *   - Articles: The `Article` entity requires an `authorId` field to track ownership and control write access.
 *   - Posts: The `Post` entity requires an `authorId` field to track ownership and control write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) User with matching {userId} can access their own profile.
     * @deny (get, create, update, delete, list) Any other user cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow the user to read, create, update, and delete their own profile.
      allow get, create, update, delete: if isOwner(userId);
      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to news article documents.
     * @path /articles/{articleId}
     * @allow (get, list) Any user can read any article.
     * @allow (create) Authenticated user can create if `authorId` matches their `uid`.
     * @allow (update, delete) Authenticated user can update/delete if they are the author (`authorId` matches their `uid`) and the document exists.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete any article.
     * @principle Public read, owner-only writes, and validates `authorId` on create.
     */
    match /articles/{articleId} {
      // Anyone can read articles.
      allow get, list: if true;

      // Only the author can create, update, or delete articles.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to news category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read any category.
     * @allow (create) Authenticated user can create.
     * @allow (update, delete) Authenticated user can update/delete if the document exists.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete any category.
     * @principle Public read, owner-only writes.
     */
    match /categories/{categoryId} {
      // Anyone can read categories.
      allow get, list: if true;

      // Only authenticated users can create, update, or delete categories.
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

       /**
        * @description Controls access to district documents.
        * @path /districts/{districtId}
        * @allow (get, list) Any user can read any district.
        * @allow (create) Authenticated user can create.
        * @allow (update, delete) Authenticated user can update/delete if the document exists.
        * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete any district.
        * @principle Public read, owner-only writes.
        */
    match /districts/{districtId} {
          // Anyone can read districts.
          allow get, list: if true;

          // Only authenticated users can create, update, or delete districts.
          allow create: if isSignedIn();
          allow update, delete: if isSignedIn() && resource != null;
        }

    /**
     * @description Controls access to job posting documents.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read any job posting.
     * @allow (create) Authenticated user can create a job posting.
     * @allow (update, delete) Authenticated user can update/delete if the document exists.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete any job posting.
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
        // Anyone can read job postings.
        allow get, list: if true;

        // Only authenticated users can create, update, or delete job postings.
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to community post documents.
     * @path /posts/{postId}
     * @allow (get, list) Any user can read any post.
     * @allow (create) Authenticated user can create if `authorId` matches their `uid`.
     * @allow (update, delete) Authenticated user can update/delete if they are the author (`authorId` matches their `uid`) and the document exists.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete any post.
     * @principle Public read, owner-only writes, and validates `authorId` on create.
     */
    match /posts/{postId} {
      // Anyone can read posts.
      allow get, list: if true;

      // Only the author can create, update, or delete posts.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of an existing document.
    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
}