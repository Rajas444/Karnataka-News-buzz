/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and public read access with owner-only writes for articles, categories, districts, jobs and posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /articles/{articleId}: Stores news articles, publicly readable, but only authors can modify.
 * - /categories/{categoryId}: Stores news categories, publicly readable, but only authors can modify.
 * - /districts/{districtId}: Stores districts, publicly readable, but only authors can modify.
 * - /jobs/{jobId}: Stores job postings, publicly readable, but only authors can modify.
 * - /posts/{postId}: Stores community posts, publicly readable, but only authors can modify.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Articles, categories, districts, jobs and posts are publicly readable, but only the author can create, update, or delete them.
 * - Data validation is limited to authorization-critical fields during `create` and `update` operations to ensure relational integrity and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile at /users/user123
     * @deny (create) - User with UID 'user123' cannot create a profile at /users/user456
     * @deny (get, update, delete) - User with UID 'user123' cannot read/update/delete the profile at /users/user456
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure news articles.  Publicly readable, but only the author can create, update, or delete.
     * @path /articles/{articleId}
     * @allow (get, list) - Any user can read all articles.
     * @allow (create) - User with UID 'user123' can create an article with authorId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete an article where resource.data.authorId == 'user123'.
     * @deny (create) - User with UID 'user123' cannot create an article with authorId 'user456'.
     * @deny (update, delete) - User with UID 'user123' cannot update/delete an article where resource.data.authorId == 'user456'.
     * @principle Public read access with owner-only writes.
     */
    match /articles/{articleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure news categories. Publicly readable, but only the author can create, update, or delete.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read all categories.
     * @allow (create, update, delete) - Only the author can create, update, or delete categories (requires authorId in schema).
     * @deny (create, update, delete) - Non-authors cannot modify categories.
     * @principle Public read access with owner-only writes.
     */
    match /categories/{categoryId} {
      // CRITICAL: Cannot implement owner-only writes. The 'Category' entity is missing an 'ownerId' or 'authorId' field.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure districts. Publicly readable, but only the author can create, update, or delete.
     * @path /districts/{districtId}
     * @allow (get, list) - Any user can read all districts.
     * @allow (create, update, delete) - Only the author can create, update, or delete districts (requires authorId in schema).
     * @deny (create, update, delete) - Non-authors cannot modify districts.
     * @principle Public read access with owner-only writes.
     */
    match /districts/{districtId} {
      // CRITICAL: Cannot implement owner-only writes. The 'District' entity is missing an 'ownerId' or 'authorId' field.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

      /**
       * @description Secure job postings. Publicly readable, but only the author can create, update, or delete.
       * @path /jobs/{jobId}
       * @allow (get, list) - Any user can read all job postings.
       * @allow (create, update, delete) - Only the author can create, update, or delete job postings (requires authorId in schema).
       * @deny (create, update, delete) - Non-authors cannot modify job postings.
       * @principle Public read access with owner-only writes.
       */
    match /jobs/{jobId} {
      // CRITICAL: Cannot implement owner-only writes. The 'Job' entity is missing an 'ownerId' or 'authorId' field.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

      /**
       * @description Secure community posts. Publicly readable, but only the author can create, update, or delete.
       * @path /posts/{postId}
       * @allow (get, list) - Any user can read all community posts.
       * @allow (create) - User with UID 'user123' can create a post with authorId 'user123'.
       * @allow (update, delete) - User with UID 'user123' can update/delete a post where resource.data.authorId == 'user123'.
       * @deny (create) - User with UID 'user123' cannot create a post with authorId 'user456'.
       * @deny (update, delete) - User with UID 'user123' cannot update/delete a post where resource.data.authorId == 'user456'.
       * @principle Public read access with owner-only writes.
       */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}