/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model, where only authenticated admin users can create, update, or delete news articles and categories.
 * @data_structure The data is organized into three top-level collections: `news_articles`, `categories`, and `roles_admin`. The `roles_admin` collection contains documents representing admin users, identified by their Firebase UID.
 * @key_security_decisions
 *   - Public read access is allowed for the `news_articles` and `categories` collections.
 *   - Only authenticated admin users can create, update, or delete documents in the `news_articles` and `categories` collections.
 *   - The `roles_admin` collection is used to manage admin privileges.
 *   - Listing of documents in `roles_admin` is disallowed to prevent unauthorized discovery of admin accounts.
 * @denormalization_for_authorization None needed. Admin status is checked directly via the `roles_admin` collection.
 * @structural_segregation All entities are stored in separate top-level collections based on the documented Firestore Structure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to news articles, but restricts write access to authenticated admins.
     * @path /news_articles/{newsArticleId}
     * @allow (get, list)
     * @allow (create, update, delete) - User with admin role can create, update and delete news articles.
     * @deny (create, update, delete) - User without admin role.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to categories, but restricts write access to authenticated admins.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create, update, delete) - User with admin role can create, update and delete categories.
     * @deny (create, update, delete) - User without admin role.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages admin user roles. Only admins can create entries in this collection. Listing is denied.
     * @path /roles_admin/{adminUserId}
     * @allow (create) - User with admin role can create entries in this collection.
     * @allow (get) - User with admin role can get entries in this collection.
     * @deny (list) Listing is denied to prevent unauthorized discovery of admin accounts.
     * @deny (create, update, delete) - User without admin role.
     * @principle Enforces role-based access control for admin users.
     */
    match /roles_admin/{adminUserId} {
      allow get, create, update, delete: if isAdmin();
      allow list: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}