
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules more readable.
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for user profiles. Only the owner can read or write their own data.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Rules for public content collections.
    // Anyone can read, but only admins can write.
    match /articles/{articleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /districts/{districtId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /jobs/{jobId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Rules for user-generated posts.
    // Anyone can read. Authenticated users can create. Only the author can update/delete.
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }
  }
}
