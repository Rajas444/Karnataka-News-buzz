/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and articles, with public read access for articles.
 * Data for categories, districts, and jobs is publicly accessible. Posts have public read access but require authentication for write operations, with ownership enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /articles/{articleId}: Stores news articles.
 * - /categories/{categoryId}: Stores news categories.
 * - /districts/{districtId}: Stores the list of districts.
 * - /jobs/{jobId}: Stores job postings.
 * - /posts/{postId}: Stores community-generated posts.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Articles are publicly readable, but only the author can modify or delete them.
 * - Categories, districts, and jobs are publicly accessible.
 * - Posts are publicly readable, but only the author can modify or delete them.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The 'Article' and 'Post' entities include an 'authorId' field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the profile document of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to news article documents.
     * @path /articles/{articleId}
     * @allow (get, list) Any user can read and list articles.
     * @allow (create) User with UID 'user123' can create an article with authorId 'user123'.
     * @allow (update, delete) User with UID 'user123' can update and delete an article they authored.
     * @deny (create) User with UID 'user456' cannot create an article with authorId 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update or delete an article authored by 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to news category documents.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read and list categories.
     * @principle Provides public read access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to district documents.
     * @path /districts/{districtId}
     * @allow (get, list) Any user can read and list districts.
     * @principle Provides public read access.
     */
    match /districts/{districtId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to job posting documents.
     * @path /jobs/{jobId}
     * @allow (get, list) Any user can read and list job postings.
     * @principle Provides public read access.
     */
    match /jobs/{jobId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Controls access to community post documents.
     * @path /posts/{postId}
     * @allow (get, list) Any user can read and list posts.
     * @allow (create) User with UID 'user123' can create a post with authorId 'user123'.
     * @allow (update, delete) User with UID 'user123' can update and delete a post they authored.
     * @deny (create) User with UID 'user456' cannot create a post with authorId 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update or delete a post authored by 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /posts/{postId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}