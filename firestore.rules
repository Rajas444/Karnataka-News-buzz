/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model, balancing open access for certain data with strict ownership and role-based restrictions for others.
 *
 * Data Structure:
 * - Users: Each user has a profile stored under `/users/{userId}`, accessible only to the owning user.
 * - Articles: News articles are stored in the `/articles/{articleId}` collection and are publicly readable, but writes are restricted to authenticated users, with the authorId field needing to match the authenticated user's id.
 * - Categories: Categories are stored in the `/categories/{categoryId}` collection and are publicly readable. Writes are generally disallowed, but can be updated with admin user role.
 * - Districts: Districts are stored in the `/districts/{districtId}` collection and are publicly readable. Writes are generally disallowed, but can be updated with admin user role.
 * - Jobs: Job postings are stored in the `/jobs/{jobId}` collection and are publicly readable. Writes are generally disallowed, but can be updated with admin user role.
 * - Posts: Community posts are stored in the `/posts/{postId}` collection and are publicly readable, but writes are restricted to authenticated users, with the authorId field needing to match the authenticated user's id.
 *
 * Key Security Decisions:
 * - Public Read Access for Articles, Categories, Districts, Jobs, and Posts: These collections are designed for public consumption, so read access is open.
 * - Owner-Only Access for User Profiles: User profiles are private and only accessible to the owning user.
 * - Role-Based Access for Administrative Operations: Administrative write operations on Categories, Districts, and Jobs collections are restricted to users with the 'admin' role.
 * - No User Listing: Listing all user profiles is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Articles and Posts include an `authorId` field within each document, which is used to enforce ownership for write operations.
 *
 * Structural Segregation:
 * - Public content (articles, categories) is stored in top-level collections, while private user data is stored under the `/users/{userId}` path, ensuring clear separation of concerns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(authorId) {
      return isSignedIn() && resource.data.authorId == request.auth.uid;
    }
    
    /**
     * @description Enforces that the `authorId` field in the request matches the authenticated user's UID.
     */
    function isValidAuthor(authorId) {
        return authorId == request.auth.uid;
    }

    /**
     * @description User profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @deny (create) User with UID 'user123' attempts to create a profile for 'user456'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description News articles. Publicly readable, but writes are restricted to the article author.
     * @path /articles/{articleId}
     * @allow (get) Any user can read an article.
     * @allow (create) User with UID 'user123' creates a new article with authorId 'user123'.
     * @deny (create) User with UID 'user123' attempts to create an article with authorId 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
      allow update: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
      allow delete: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
    }

    /**
     * @description News categories. Publicly readable, write access restricted to admins.
     * @path /categories/{categoryId}
     * @allow (get) Any user can read a category.
     * @allow (create) User with 'admin' role creates a new category.
     * @deny (create) User without 'admin' role attempts to create a category.
     * @principle Restricts write access to authorized roles.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Districts. Publicly readable, write access restricted to admins.
     * @path /districts/{districtId}
     * @allow (get) Any user can read a district.
     * @allow (create) User with 'admin' role creates a new district.
     * @deny (create) User without 'admin' role attempts to create a district.
     * @principle Restricts write access to authorized roles.
     */
    match /districts/{districtId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Job postings. Publicly readable, write access restricted to admins.
     * @path /jobs/{jobId}
     * @allow (get) Any user can read a job posting.
     * @allow (create) User with 'admin' role creates a new job posting.
     * @deny (create) User without 'admin' role attempts to create a job posting.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Community-generated posts. Publicly readable, but writes are restricted to the post author.
     * @path /posts/{postId}
     * @allow (get) Any user can read a community post.
     * @allow (create) User with UID 'user123' creates a new post with authorId 'user123'.
     * @deny (create) User with UID 'user123' attempts to create a post with authorId 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
      allow update: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
      allow delete: if isSignedIn() && isValidAuthor(request.resource.data.authorId);
    }
  }
}