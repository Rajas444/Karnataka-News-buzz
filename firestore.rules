/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model for user data and a public-read, owner-write model for shared content like articles and posts.
 * Strict ownership is enforced for user profiles, while content is readable by everyone but only modifiable by the creator.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are strictly private to the owning user.
 * - Articles are stored under `/articles/{articleId}` and are publicly readable but only writable by the author.
 * - Categories and Districts are stored under `/categories/{categoryId}` and `/districts/{districtId}` and are publicly readable.
 * - Job postings are stored under `/jobs/{jobId}` and are publicly readable.
 * - Community posts are stored under `/posts/{postId}` and are publicly readable but only writable by the author.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The `Article` and `Post` entities employ a "Public Read with Owner-Only Writes" access pattern.
 *
 * Denormalization for Authorization:
 * - Articles and Posts contain an `authorId` field to enable efficient ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the resource and it exists.
      * @param {string} userId - The user ID to check against.
      * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can only access and modify their own profile.
     * @deny (create) - If the user id doesn't match the authenticated user id.
     * @deny (get, update, delete) - If the user id doesn't match the authenticated user id.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for news articles.
     * @path /articles/{articleId}
     * @allow (get, list) - Any user can read articles.
     * @allow (create) - Only authenticated users can create articles, and the authorId must match the authenticated user's ID.
     * @allow (update, delete) - Only the author of the article can update or delete it.
     * @deny (create) - If the authorId does not match the authenticated user ID.
     * @deny (update, delete) - If the user is not the author of the article.
     * @principle Public read with owner-only writes for articles.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for news categories.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read categories.
     * @deny (create, update, delete) - No user can create, update, or delete categories.
     * @principle Public read, no write access for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for districts.
     * @path /districts/{districtId}
     * @allow (get, list) - Any user can read districts.
     * @deny (create, update, delete) - No user can create, update, or delete districts.
     * @principle Public read, no write access for districts.
     */
    match /districts/{districtId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for job postings.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job postings.
     * @deny (create, update, delete) - No user can create, update, or delete job postings.
     * @principle Public read, no write access for job postings.
     */
    match /jobs/{jobId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

     /**
     * @description Rules for community posts.
     * @path /posts/{postId}
     * @allow (get, list) - Any user can read posts.
     * @allow (create) - Only authenticated users can create posts, and the authorId must match the authenticated user's ID.
     * @allow (update, delete) - Only the author of the post can update or delete it.
     * @deny (create) - If the authorId does not match the authenticated user ID.
     * @deny (update, delete) - If the user is not the author of the post.
     * @principle Public read with owner-only writes for posts.
     */
    match /posts/{postId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.authorId);
        allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}